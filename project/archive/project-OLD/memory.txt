module SimpleMemory #(
    parameter ADDR_WIDTH = 64,
    parameter DATA_WIDTH = 64,
    parameter MEM_SIZE = 1024  // 1024 entries of 64-bit memory
) (
    input clk,
    input reset,

    // Read signals
    input mem_read,
    input [ADDR_WIDTH-1:0] read_addr,
    output logic [DATA_WIDTH-1:0] read_data,
    output logic read_ready,

    // Write signals
    input mem_write,
    input [ADDR_WIDTH-1:0] write_addr,
    input [DATA_WIDTH-1:0] write_data,
    output logic write_ready
);

    // Memory array
    logic [DATA_WIDTH-1:0] memory [0:MEM_SIZE-1];

    // Address decoding
    logic [$clog2(MEM_SIZE)-1:0] decoded_addr;
    assign decoded_addr = mem_read ? read_addr[$clog2(MEM_SIZE)-1:0] : 
                          write_addr[$clog2(MEM_SIZE)-1:0];

    // Read logic
    always_ff @(posedge clk or posedge reset) begin
        if (reset) begin
            read_ready <= 0;
        end else if (mem_read) begin
            read_data <= memory[decoded_addr];
            read_ready <= 1;
        end else begin
            read_ready <= 0;
        end
    end

    // Write logic
    always_ff @(posedge clk or posedge reset) begin
        if (reset) begin
            write_ready <= 0;
        end else if (mem_write) begin
            memory[decoded_addr] <= write_data;
            write_ready <= 1;
        end else begin
            write_ready <= 0;
        end
    end
endmodule
